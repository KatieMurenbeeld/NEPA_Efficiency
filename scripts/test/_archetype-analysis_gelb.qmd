---
title: "archetype analysis SGFCM"
author: "Katie Murenbeeld"
date: "08/16/2024"
format:
html:
code-fold: true
---

```{r libraries}
library(tidyverse)
library(terra)
library(raster)
library(sf)
library(ggplot2)
library(tmap)
library(geocmeans)
library(RColorBrewer)
library(viridis)
library(future)
library(spdep)
library(classInt)
```

# Archetype Analysis Using Spatial Fuzzy C-Means

Here I am following the general approach and workflow as presented by Jeremey Gelb for creating fuzzy clusters or archetypes SE attributes. See <https://cran.r-project.org/web/packages/geocmeans/vignettes/introduction.html> and <https://jeremygelb.github.io/geocmeans/articles/web_vignettes/rasters.html>.

# Load and Format the Data

Here we are using the raster stack of scaled data with the PMRC attributes and AIP.

```{r load_format_data}

# Load the data
rst_fcm_pmrc_poli_sc <- rast("/Users/katiemurenbeeld/Analysis/Archetype_Analysis/data/processed/rst_fcm_pmrc_poli_sc_2024-08-12.tif")
rst_fcm_pmrc_poli <- rast("/Users/katiemurenbeeld/Analysis/Archetype_Analysis/data/processed/rast_fcm_pmrc2024_ploi_2024-08-12.tif")
# Two different formats
## geocmeans requires a simple list of SpatRaster
dataset_pmrc_poli <- lapply(names(rst_fcm_pmrc_poli_sc), function(n){
  aband <- rst_fcm_pmrc_poli_sc[[n]]
  return(aband)
})
names(dataset_pmrc_poli) <- names(rst_fcm_pmrc_poli_sc)

## other functions require the data in a data frame

df_sc <- as.data.frame(rst_fcm_pmrc_poli_sc, xy=TRUE)
df_sc_nogeo <- df_sc %>%
  dplyr::select(-c("x", "y")) %>%
  drop_na()

## Create dataframes for ease of mapping and looking at results
df_all <- as.data.frame(rst_fcm_pmrc_poli, xy = TRUE, na.rm = TRUE)
df_all_sc <- as.data.frame(rst_fcm_pmrc_poli_sc, xy = TRUE, na.rm = TRUE)

```

# Classical K-means and Fuzzy C-means

Use classical K-means and non-spatial fuzzy c-means to explore the data and pick values for *k* (number of clusters) and *m* (the fuzzifier parameter).

```{r k-means}
# finding the best k by using the r2 of the classification
# trying for k from 2 to 10
R2s <- sapply(2:10,function(k){
  Clust <- kmeans(df_sc_nogeo, 
                  centers = k,
                  iter.max = 150)
  R2 <- Clust$betweenss / Clust$totss
  return(R2)
})

kmeans_df <- data.frame(K=2:10,
                        R2 = R2s)

# create an elbow plot of R2s and K
ggplot(kmeans_df)+
  geom_line(aes(x=K,y=R2s))+
  geom_point(aes(x=K,y=R2s),color="red")+
  xlab("Number of groups")+
  ylab("R2 of classification")
```

From the classical k-means a good number of clusters would be 4.

However, that only explains about 0.38 of the variance.

Previously we used non-spatial fuzzy c-means to determine a good *k* and *m* by looking at the silhouette index. We chose *k* = 8 and *m* = 1.6

```{r fcm_param}
#FCMvalues <- select_parameters.mc(algo = "FCM", data = dataset_pmrc_poli, 
#                                  k = 2:10, m = seq(1.2,2,0.1), spconsist = FALSE, 
#                                  indices = c("XieBeni.index", "Explained.inertia",
#                                              "Negentropy.index", "Silhouette.index"),
#                                  verbose = TRUE)

FCMvalues <- read_csv("/Users/katiemurenbeeld/Analysis/Archetype_Analysis/outputs/fcm_pmrc_poli_indices_2024-07-22.csv")
sil.idx.fcm <- ggplot(FCMvalues) + 
  geom_raster(aes(x = m, y = k, fill = Silhouette.index)) + 
  geom_text(aes(x = m, y = k, label = round(Silhouette.index,2)), size = 2) +
  coord_fixed(ratio=0.125) +
  scale_fill_viridis()
sil.idx.fcm
```

# Generalized FCM

We can also use a generalized version of the FCM which includes a *beta* value. The *beta* value controls the strength of the updates to the membership matrix. FCM is an iterative approach that will run until convergence or to some threshold is met, i.e. the distance between the center of clusters from one iteration to the next are less than a set threshold.

```{r gfcm_param}
#GFCMvalues <- select_parameters.mc(algo = "GFCM", data = dataset_pmrc_poli,
#                                   k = 8, m = 1.6, beta = seq(0.1,0.9,0.1),
#                                   spconsist = FALSE, verbose = TRUE, init = "kpp",
#                                   indices = c("XieBeni.index", "Explained.inertia",
#                                               "Negentropy.index", "Silhouette.index"))

GFCMvalues <- read_csv("/Users/katiemurenbeeld/Analysis/Archetype_Analysis/outputs/gfcm_pmrc_poli_indices_2024-08-21.csv")
# showing the silhouette index
ggplot(GFCMvalues) + 
  geom_raster(aes(x = m, y = beta, fill = Silhouette.index)) + 
  geom_text(aes(x = m, y = beta, label = round(Silhouette.index,2)), size = 2)+
  scale_fill_viridis() +
  coord_fixed(ratio=1)
```

From this we can set *beta* = 0.1.

# Spatial FCM and Spatial GFCM

Now that we have determined our *k*, *m*, and (potentially) *beta* we move on to using the spatial version of the FCM and GFCM. We will select an *alpha* parameter which basically acts a spatial smoothing parameter.

```{r sfcm_param}
# set different window sizes, squares since we are working with rasters
w1 <- matrix(1, nrow = 3, ncol = 3)
w2 <- matrix(1, nrow = 5, ncol = 5)
w3 <- matrix(1, nrow = 7, ncol = 7)

#SFCMvalues <- select_parameters.mc(algo = "SFCM", data = dataset_pmrc_poli, 
#                                          k = 8, m = 1.6,
#                                          alpha = seq(0.5,2,0.1),
#                                          window = list(w1,w2,w3),
#                                          spconsist = TRUE, nrep = 5, 
#                                          verbose = TRUE, chunk_size = 4,
#                                          seed = 6891, init = "kpp",
#                                          indices = c("XieBeni.index", "Explained.inertia",
#                                                      "Negentropy.index", "Silhouette.index"#))


#dict <- data.frame(
#  w = c(1,2,3),
#  window = c("3x3","5x5","7x7")
#)

#SFCMvalues$window <- dict$window[match(SFCMvalues$window,dict$w)]

SFCMvalues <- read_csv("/Users/katiemurenbeeld/Analysis/Archetype_Analysis/outputs/sfcm_pmrc_poli_indices_2024-08-21.csv")

# showing the silhouette index
ggplot(SFCMvalues) + 
  geom_raster(aes(x = alpha, y = window, fill = Silhouette.index)) + 
  geom_text(aes(x = alpha, y = window, label = round(Silhouette.index,2)), size = 1.5)+
  scale_fill_viridis() +
  coord_fixed(ratio=0.125)
```

Even though we have already chosen a *beta* we can confirm our choice by completing another grid search for the *alpha-beta* pair that will produce a high silhouette index.

```{r sgfcm_param}
## looking at alpha and beta for SGFCM
#future::plan(future::multisession(workers=2))
#DFindices_SFGCM <- select_parameters.mc(algo = "SGFCM", data = dataset_pmrc_poli,
#                                       k = 8, m = 1.6, 
#                                       beta = seq(0,1.0,0.1), alpha = seq(0,2,0.1),
#                                       window = w1, spconsist = TRUE, nrep = 5, 
#                                       verbose = TRUE, chunk_size = 4,
#                                       seed = 456, init = "kpp",
#                                       indices = c("XieBeni.index", "Explained.inertia",
#                                                   "Negentropy.index", "Silhouette.index"))
DFindices_SGFCM <- read_csv("/Users/katiemurenbeeld/Analysis/Archetype_Analysis/outputs/sgfcm_pmrc_poli_indices_alpha_beta_2024-08-22.csv")
ggplot(DFindices_SGFCM) + 
  geom_raster(aes(x = alpha, y = beta, fill = Silhouette.index),  size = 5) + 
  geom_text(aes(x = alpha, y = beta, label = round(Silhouette.index,2)), size = 1.5)+
  scale_fill_viridis() +
  coord_fixed(ratio=1)
```

We find that *beta* = 0.1 and *alpha* = 1.3 or 1.6 produce the highest silhouette index values.

```{r sgfcm_model}

SGFCM_result <- SGFCMeans(dataset_pmrc_poli, k = 8, m = 1.6, standardize = FALSE,
                          lag_method = "mean",
                          window = w1, alpha = 1.3, beta = 0.1,
                          seed = 6891, tol = 0.001, verbose = TRUE, init = "kpp")

```

```{r sgfcm_map}
maps_sgfcm <- mapClusters(object = SGFCM_result, undecided = 0.2)

# plotting the most likely categories
maps_sgfcm$ClusterPlot + theme(legend.position = "bottom") + 
  scale_fill_brewer(palette = "Set3")
```

# Membership Values

```{r sgfcm_membership}

# plotting membership values for group 1
maps_sgfcm$ProbaMaps[[1]] + theme(legend.position = "bottom")

# plotting membership values for group 2
maps_sgfcm$ProbaMaps[[2]] + theme(legend.position = "bottom")

# plotting membership values for group 3
maps_sgfcm$ProbaMaps[[3]] + theme(legend.position = "bottom")

# plotting membership values for group 4
maps_sgfcm$ProbaMaps[[4]] + theme(legend.position = "bottom")

# plotting membership values for group 5
maps_sgfcm$ProbaMaps[[5]] + theme(legend.position = "bottom")

# plotting membership values for group 6
maps_sgfcm$ProbaMaps[[6]] + theme(legend.position = "bottom")

# plotting membership values for group 7
maps_sgfcm$ProbaMaps[[7]] + theme(legend.position = "bottom")

# plotting membership values for group 8
maps_sgfcm$ProbaMaps[[8]] + theme(legend.position = "bottom")
```

# Compare the maps and metrics between FCM, GFCM, SFCM, and SGFCM

# Shannon Entropy Index

```{r sgfcm_shann_info}
# Shannon information index
df_all$entropyidx  <- calcUncertaintyIndex(SGFCM_result$Belongings)

ggplot(df_all, aes(x = x, y = y)) + 
  geom_point(aes(colour = entropyidx))
```

# For the SGFCM: Global and Local Moran's I and Belonging

```{r sgfcm_globalmoran}
diagSGFCM <- spatialDiag(SGFCM_result, window = matrix(1, nrow = 3, ncol = 3), nrep = 5)
```

```{r sgfcm_globalmoran_values}
diagSGFCM$MoranValues
```

```{r sgfcm_localmoran}
# calculating the local Moran I values
loc_moran1 <- calc_local_moran_raster(SGFCM_result$rasters$group1,w1)
loc_moran2 <- calc_local_moran_raster(SGFCM_result$rasters$group2,w1)
loc_moran3 <- calc_local_moran_raster(SGFCM_result$rasters$group3,w1)
loc_moran4 <- calc_local_moran_raster(SGFCM_result$rasters$group4,w1)
loc_moran5 <- calc_local_moran_raster(SGFCM_result$rasters$group5,w1)
loc_moran6 <- calc_local_moran_raster(SGFCM_result$rasters$group6,w1)
loc_moran7 <- calc_local_moran_raster(SGFCM_result$rasters$group7,w1)
loc_moran8 <- calc_local_moran_raster(SGFCM_result$rasters$group8,w1)
```

```{r sgfcm_localmoran_maps}

cols <- rev(RColorBrewer::brewer.pal(n = 8, "Spectral"))

vals1 <- terra::values(loc_moran1, mat = FALSE) 
limits1 <- classIntervals(vals1,  n = 8, style = "kmeans") 
plot(loc_moran1, col = cols, breaks = limits1$brks)

vals2 <- terra::values(loc_moran2, mat = FALSE) 
limits2 <- classIntervals(vals2,  n = 8, style = "kmeans") 
plot(loc_moran2, col = cols, breaks = limits2$brks)

vals3 <- terra::values(loc_moran3, mat = FALSE) 
limits3 <- classIntervals(vals3,  n = 8, style = "kmeans") 
plot(loc_moran3, col = cols, breaks = limits3$brks)

vals4 <- terra::values(loc_moran4, mat = FALSE) 
limits4 <- classIntervals(vals4,  n = 8, style = "kmeans") 
plot(loc_moran4, col = cols, breaks = limits4$brks)

vals5 <- terra::values(loc_moran5, mat = FALSE) 
limits5 <- classIntervals(vals5,  n = 8, style = "kmeans") 
plot(loc_moran5, col = cols, breaks = limits5$brks)

vals6 <- terra::values(loc_moran6, mat = FALSE) 
limits6 <- classIntervals(vals6,  n = 8, style = "kmeans") 
plot(loc_moran6, col = cols, breaks = limits6$brks)

vals7 <- terra::values(loc_moran7, mat = FALSE) 
limits7 <- classIntervals(vals7,  n = 8, style = "kmeans") 
plot(loc_moran7, col = cols, breaks = limits7$brks)

vals8 <- terra::values(loc_moran8, mat = FALSE) 
limits8 <- classIntervals(vals8,  n = 8, style = "kmeans") 
plot(loc_moran8, col = cols, breaks = limits8$brks)
```

# For the SGFCM: ELSA and Fuzzy ELSA

```{r sgfcm_fuzzy_elsa}
# Fuzzy ELSA
fuzzy_elsa_rast <- calcFuzzyELSA(SGFCM_result,window = matrix(1,nrow = 3, ncol = 3))

cols <- RColorBrewer::brewer.pal(n = 7, "Greys")
vals <- terra::values(fuzzy_elsa_rast, mat = FALSE)
limits <- classIntervals(vals[!is.na(vals)],  n = 7, style = "kmeans") 
plot(fuzzy_elsa_rast, col = cols, breaks = limits$brks)
```

# For the SGFCM: Bootstrap Cluster Stability

# Tables with Global and Cluster Means and SDs for the Attributes

```{r sgfcm_data}
summarizeClusters(df_all,
                  belongmatrix = SGFCM_result$Belongings,
                  weighted = TRUE, dec = 3)
```

```{r attribute_means_sd}

df_all %>% summarise_all(mean)
df_all %>% summarise_all(sd)
```

# Violin Plots

```{r sgfcm_violinplots}
violinPlots(df_all_sc, SGFCM_result$Groups)
```
